---
import Layout from "../layout/index.astro";
import GameCard from "../components/game_card.astro";
---

<Layout>
  <div class="mt-5 d-flex flex-row justify-content-between">
    <h5>Pares encontrados: <span id="score">0</span></h5>
    <h5>Tempo: <span id="time">00:00</span></h5>
  </div>
  <div class="d-flex gap-3 justify-content-evenly my-5 flex-wrap">
    <GameCard
      name="onça"
      scientific_name="panthera onca"
      animal_class="Mamífero"
      risk_of_extinction="Baixo"
      image="img/onca.jpg"
    />

    <GameCard
      name="tucano"
      scientific_name="ramphastos toco"
      animal_class="Ave"
      risk_of_extinction="Médio"
      image="img/tucano.jpg"
    />

    <GameCard
      name="boto-cor-de-rosa"
      scientific_name="inia geoffrensis"
      animal_class="Mamífero"
      risk_of_extinction="Alto"
      image="img/boto.jpg"
    />

    <GameCard
      name="jabuti"
      scientific_name="chelonoidis denticulata"
      animal_class="Réptil"
      risk_of_extinction="Médio"
      image="img/jabuti.jpg"
    />

    <GameCard
      name="arara-azul"
      scientific_name="anodorhynchus hyacinthinus"
      animal_class="Ave"
      risk_of_extinction="Alto"
      image="img/arara-azul.jpg"
    />

    <GameCard
      name="pirarucu"
      scientific_name="arapaima gigas"
      animal_class="Peixe"
      risk_of_extinction="Baixo"
      image="img/pirarucu.jpg"
    />
    <GameCard
      name="onça"
      scientific_name="panthera onca"
      animal_class="Mamífero"
      risk_of_extinction="Baixo"
      image="img/onca.jpg"
    />

    <GameCard
      name="tucano"
      scientific_name="ramphastos toco"
      animal_class="Ave"
      risk_of_extinction="Médio"
      image="img/tucano.jpg"
    />

    <GameCard
      name="boto-cor-de-rosa"
      scientific_name="inia geoffrensis"
      animal_class="Mamífero"
      risk_of_extinction="Alto"
      image="img/boto.jpg"
    />

    <GameCard
      name="jabuti"
      scientific_name="chelonoidis denticulata"
      animal_class="Réptil"
      risk_of_extinction="Médio"
      image="img/jabuti.jpg"
    />

    <GameCard
      name="arara-azul"
      scientific_name="anodorhynchus hyacinthinus"
      animal_class="Ave"
      risk_of_extinction="Alto"
      image="img/arara-azul.jpg"
    />

    <GameCard
      name="pirarucu"
      scientific_name="arapaima gigas"
      animal_class="Peixe"
      risk_of_extinction="Baixo"
      image="img/pirarucu.jpg"
    />
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    let score = 0;
    let time = 0;
    let timerInterval: number;

    function syncScore() {
      const scoreElement = document.querySelector("#score");
      if (scoreElement) {
        scoreElement.innerHTML = score.toString();
      }
    }

    function syncTime() {
      const minutes = Math.floor(time / 60)
        .toString()
        .padStart(2, "0");
      const seconds = (time % 60).toString().padStart(2, "0");
      const timeElement = document.querySelector("#time");
      if (timeElement) {
        timeElement.innerHTML = `${minutes}:${seconds}`;
      }
    }

    function checkGameEnd() {
      const totalCards = document.querySelectorAll(".flip-card-inner").length;
      const blockedCards = document.querySelectorAll(
        ".flip-card-inner.blocked",
      ).length;
      if (blockedCards === totalCards) {
        clearInterval(timerInterval); // Stop the timer
        alert("Jogo finalizado!"); // Alert the user
      }
    }

    let flippedCards: HTMLDivElement[] = [];
    function flipCard(card: HTMLDivElement) {
      // If the clicked card is already flipped, do nothing
      if (
        card.classList.contains("fliped") ||
        card.classList.contains("blocked")
      ) {
        return;
      }

      // If two cards are already flipped, unflip them and reset the flippedCards array
      if (flippedCards.length === 2) {
        const [card1, card2] = flippedCards;
        card1.classList.remove("fliped");
        card2.classList.remove("fliped");
        flippedCards = [];
      }

      // Flip the clicked card and add it to the flippedCards array
      card.classList.add("fliped");
      flippedCards.push(card as HTMLDivElement);

      // After flipping the card, check if there are the same two cards flipped
      if (flippedCards.length === 2) {
        const [card1, card2] = flippedCards;
        if (card1.dataset.animalId === card2.dataset.animalId) {
          // If they match, block them and increment the score
          card1.classList.add("blocked");
          card2.classList.add("blocked");
          score++;
          syncScore();
          flippedCards = [];
        }
      }
    }

    const cards = document.querySelectorAll(".flip-card-inner");

    if (cards) {
      cards.forEach((card) => {
        card.addEventListener("click", () => {
          flipCard(card as HTMLDivElement);
          checkGameEnd();
        });
      });
    }

    timerInterval = setInterval(() => {
      time++;
      syncTime();
    }, 1000);

    syncScore();
  });
</script>
